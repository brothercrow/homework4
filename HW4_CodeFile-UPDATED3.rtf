{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch31506\stshfhich31506\stshfbi31506\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f39\fbidi \fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Consolas{\*\falt Liberation Mono};}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f40\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f41\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f43\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f44\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f45\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f46\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f47\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f48\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f60\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f61\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f63\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f64\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f65\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f66\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f67\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f68\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f430\fbidi \fmodern\fcharset238\fprq1 Consolas CE{\*\falt Liberation Mono};}
{\f431\fbidi \fmodern\fcharset204\fprq1 Consolas Cyr{\*\falt Liberation Mono};}{\f433\fbidi \fmodern\fcharset161\fprq1 Consolas Greek{\*\falt Liberation Mono};}{\f434\fbidi \fmodern\fcharset162\fprq1 Consolas Tur{\*\falt Liberation Mono};}
{\f437\fbidi \fmodern\fcharset186\fprq1 Consolas Baltic{\*\falt Liberation Mono};}{\f438\fbidi \fmodern\fcharset163\fprq1 Consolas (Vietnamese){\*\falt Liberation Mono};}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \f31506\fs22 }{\*\defpap 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 
\f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31506\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused Normal Table;}}
{\*\listtable{\list\listtemplateid393106052\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 
\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\lin1440 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0
{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 
\fi-360\li5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\lin6480 }{\listname 
;}\listid1357344732}}{\*\listoverridetable{\listoverride\listid1357344732\listoverridecount0\ls1}}{\*\rsidtbl \rsid472345\rsid474392\rsid596811\rsid617269\rsid1015424\rsid1065166\rsid1457788\rsid1526753\rsid1601301\rsid1783059\rsid2111960\rsid2112632
\rsid2779507\rsid2906891\rsid3042093\rsid3153413\rsid3552944\rsid3610937\rsid3625565\rsid3869789\rsid3954342\rsid4134368\rsid4472176\rsid4604986\rsid4720902\rsid4793976\rsid4983023\rsid5181124\rsid5205034\rsid5207222\rsid6049027\rsid6361045\rsid6752349
\rsid7043638\rsid7234212\rsid7369717\rsid7602742\rsid8081189\rsid8258214\rsid8396112\rsid8463697\rsid8466639\rsid9004069\rsid9135895\rsid9245238\rsid9597656\rsid9840137\rsid9845371\rsid10386994\rsid10499249\rsid10552183\rsid10642571\rsid10696860
\rsid10775156\rsid11099074\rsid11170450\rsid11361946\rsid11628525\rsid11628652\rsid11757683\rsid12138605\rsid13048679\rsid13177082\rsid13515121\rsid13710398\rsid14043284\rsid14118099\rsid14174378\rsid14308708\rsid14552297\rsid14624371\rsid14632248
\rsid14756820\rsid14906061\rsid15101865\rsid15208180\rsid15479932\rsid15486708\rsid15752018\rsid15890586\rsid15944944\rsid16207385\rsid16662191\rsid16669180}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1
\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Faculty}{\operator Faculty}{\creatim\yr2015\mo11\dy3\hr21\min27}{\revtim\yr2015\mo11\dy3\hr21\min27}{\version2}{\edmins0}{\nofpages9}{\nofwords2207}{\nofchars12585}{\*\company FHDA}{\nofcharsws14763}
{\vern49167}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1080\margr1080\margt1080\margb1080\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1080\dgvorigin1080\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale150\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot6752349\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid1015424\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 
\f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656 Programming HW#4 Code to Change and Complete:}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid2906891  (}{
\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight4\insrsid2906891\charrsid2906891 UPDATED}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight4\insrsid7602742\charrsid7602742 1}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid7602742 , }{
\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight3\insrsid7602742\charrsid7602742 UPDATED2}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid8081189 , }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight5\insrsid8081189\charrsid8081189 
UPDATED3}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid2906891 )}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid15486708\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10499249\charrsid9597656 //}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656 IN BinaryTree.h:
\par 
\par template<class ItemType>
\par class BinaryTree
\par \{
\par protected:
\par \tab BinaryNode<ItemType>* rootPtr;\tab \tab // ptr to root node
\par \tab int count;\tab \tab \tab \tab \tab \tab \tab // number of nodes in tree
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid4720902\charrsid9597656 \tab // copy from the tree rooted at nodePtr and returns a pointer to the copy
\par \tab BinaryNode<ItemType>* copyTree(const BinaryNode<ItemType>* nodePtr);
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656 
\par public:
\par \tab // "admin" functions
\par  \tab BinaryTree()\tab \tab \tab \tab \tab \{rootPtr = 0; count = 0;\}
\par \tab BinaryTree(con}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid16207385\charrsid9597656 st BinaryTree<ItemType> & tree)}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 \{}{\rtlch\fcs1 \af39\afs20 
\ltrch\fcs0 \f39\fs20\highlight7\insrsid16207385\charrsid9597656 __}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4472176\charrsid9597656 // }{
\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid474392\charrsid9597656 see assignment}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656 
\par \tab virtual ~BinaryTree()\tab \tab \tab \tab }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4472176\charrsid9597656 \{ }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16207385\charrsid9597656 ___}{\rtlch\fcs1 
\af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4472176\charrsid9597656 \}// CALL }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid3625565\charrsid9597656 clear()}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\insrsid6752349\charrsid9597656 \tab \tab 
\par \tab BinaryTree & operator=(const BinaryTree & sourceTree);
\par    
\par \tab // common functions for all binary trees
\par  \tab bool isEmpty() const\tab \tab \tab \tab \{return count == 0;\}
\par \tab int size() const\tab \tab \tab \tab \tab \{return count;\}
\par \tab void clear()\{}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid11628652\charrsid9597656 cout<<"}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid1457788\charrsid9597656 \\n}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight8\insrsid11628652\charrsid9597656 Clearing old tree\\n}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid1457788\charrsid9597656 \\n}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight8\insrsid11628652\charrsid9597656 "}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid11628652\charrsid9597656 ; }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid9135895\charrsid9597656 destroyTree(rootPtr); rootPtr=}{
\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656 0; count=0;\}
\par \tab void preOrder(void visit(ItemType &)) const\tab \tab \{_preorder(visit, rootPtr);\}
\par \tab void inOrder(void visit(ItemType &)) const\tab \tab \{_inorder(visit, rootPtr);\}
\par \tab void postOrder(void visit(ItemType &)) const\tab \{_postorder(visit, rootPtr);\}\tab 
\par 
\par \tab // abstract functions to be implemented by derived class
\par \tab virtual bool insert(const ItemType & newData) = 0; 
\par \tab virtual bool remove(const ItemType & data) = 0; 
\par \tab virtual bool getEntry(const ItemType & anEntry, ItemType & returnedItem) const = 0;
\par 
\par private:   
\par \tab // delete all nodes from the tree
\par \tab void destroyTree(BinaryNode<ItemType>* nodePtr);
\par 
\par \tab // internal traverse
\par \tab void _preorder(void visit(ItemType &), BinaryNode<ItemType>* nodePtr) const;
\par \tab void _inorder(void visit(ItemType &), BinaryNode<ItemType>* nodePtr) const;
\par \tab void _postorder(void visit(ItemType &), BinaryNode<ItemType>* nodePtr) const;
\par    
\par \}; 
\par 
\par //////////////////////////////////////////////////////////////////////////
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid10386994\charrsid9597656 //*****************************COMPLETE THIS******************************
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 template<class ItemType>
\par BinaryNode<ItemType>* BinaryTree<ItemType>::copyTree(const BinaryNode<ItemType>* nodePtr) 
\par \{
\par \tab BinaryNode<ItemType>* newNodePtr = 0;
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid11757683\charrsid9597656 // FILL IN SEVERAL LINES HERE USING THE ALGORITHM:
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4134368\charrsid9597656 //    If nodePtr doesn't exist (is 0) Then return 0
\par //    
\par //\tab Assign a new BinaryNode to newNodePtr
\par //\tab Set the }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14118099\charrsid9597656 newNodePtr's data (item) to the n}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4134368\charrsid9597656 odePtr's item
\par //\tab }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14118099\charrsid9597656 Set the newNodePtr's leftPtr to 
\par //\tab \tab a recursive call to copyTree for the nodePtr's leftPtr}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4134368\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14118099\charrsid9597656 //    }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid5205034\charrsid9597656  }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight7\insrsid14118099\charrsid9597656 Set the newNodePtr's rightPtr to
\par //\tab \tab a recursive call to copyTree for the nodePtr's rightPtr
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid7043638\charrsid9597656 //\tab INCREMENT count
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 
\par     return newNodePtr;
\par \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656   
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 //*****************************COMPLETE THIS******************************
\par template<class ItemType>
\par void BinaryTree<ItemType>::destroyTree(BinaryNode<ItemType>* nodePtr)
\par \{
\par \tab //}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid8396112\charrsid9597656 FILL IN SEVERAL LINES HERE, USING THE }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 ALGORITHM:
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\faauto\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1015424\charrsid9597656 \tab 
//    if nodePtr doesn't exist (is 0), return
\par \tab //    destroy the left subtree (recursive call to destroyTree)
\par \tab //    destroy the right subtree (recursive call to destroyTree)
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1015424\charrsid9597656 \tab 
//    delete nodePtr
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid6752349\charrsid9597656   
\par 
\par template<class ItemType>
\par void BinaryTree<ItemType>::_preorder(void visit(ItemType &), BinaryNode<ItemType>* nodePtr) const
\par \{
\par \tab if (nodePtr != 0)
\par \tab \{
\par \tab \tab ItemType item = nodePtr->getItem();
\par \tab \tab visit(item);
\par \tab \tab _preorder(visit, nodePtr->getLeftPtr());
\par \tab \tab _preorder(visit, nodePtr->getRightPtr());
\par \tab \} 
\par \}  
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 //*****************************COMPLETE THIS******************************
\par template<class ItemType>
\par void BinaryTree<ItemType>::_inorder(void visit(ItemType &), BinaryNode<ItemType>* nodePtr) const
\par \{
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1015424\charrsid9597656 \tab // see _preorder for similar code}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 
\par \}  
\par 
\par //*****************************COMPLETE THIS******************************
\par template<class ItemType>
\par void BinaryTree<ItemType>::_postorder(void visit(ItemType &), BinaryNode<ItemType>* nodePtr) const
\par \{
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1015424\charrsid9597656 \tab // see _preorder for similar code}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6752349\charrsid9597656 
\par \}  
\par 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\faauto\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid8463697\charrsid9597656 template<class ItemType>
\par BinaryTree<ItemType> & BinaryTree<ItemType>::operator=(const BinaryTree<ItemType> & sourceTree)
\par \{
\par \tab // CALL copyTree and return *this
\par \tab if(rootPtr != 0) // already filled tree?
\par \tab \tab }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid12138605\charrsid9597656 clear(}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid8463697\charrsid9597656 ); // clear old tree
\par \tab rootPtr = copyTree(sourceTree.rootPtr);
\par \tab return *this;
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid8463697\charrsid9597656 \}  }{
\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10499249\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid8463697\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid16207385\charrsid9597656 //************************************************************************
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10499249\charrsid9597656 //IN BinarySearchTree.h:
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 template<class ItemType>
\par class BinarySearchTree : public BinaryTree<ItemType>
\par \{
\par private:
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 //*********** ADD A POINTER TO FUNCTION }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight5\insrsid8081189\charrsid8081189 MEMBER VARIABLE }{\rtlch\fcs1 
\af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 AS DESCRIBED ON THE ASSIGNMENT********}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par 
\par \tab // internal insert node: insert newNode in nodePtr subtree
\par \tab BinaryNode<ItemType>* _insert(BinaryNode<ItemType>* nodePtr, BinaryNode<ItemType>* newNode);
\par 
\par \tab // internal remove node: locate and delete target node under nodePtr subtree
\par \tab BinaryNode<ItemType>* _remove(BinaryNode<ItemType>* nodePtr, const ItemType target, bool & success);
\par 
\par \tab // delete target node from tree, called by internal remove node
\par \tab BinaryNode<ItemType>* deleteNode(BinaryNode<ItemType>* targetNodePtr);
\par 
\par \tab // remove the leftmost node in the left subtree of nodePtr
\par \tab BinaryNode<ItemType>* removeLeftmostNode(BinaryNode<ItemType>* nodePtr, ItemType & successor);
\par 
\par \tab // search for target node
\par \tab BinaryNode<ItemType>* findNode(BinaryNode<ItemType>* treePtr, const ItemType & target) const;
\par 
\par public:
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 //*********** ADD A CONSTRUCTOR AS DESCRIBED ON THE ASSIGNMENT********}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4472176\charrsid9597656 //*********** ADD A COPY CONSTRUCTOR AS DESCRIBED ON THE ASSIGNMENT********}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid4472176\charrsid9597656 
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 \tab // insert a node at the correct location
\par     }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10386994\charrsid9597656 \tab }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 bool insert(const ItemType & newEntry);
\par \tab // remove a node if found
\par \tab bool remove(const ItemType & anEntry);
\par \tab // find a target node
\par \tab bool getEntry(const ItemType & target, ItemType & returnedItem) const;
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1601301\charrsid2112632 // NOT IN THE Tree Code Files on Catalyst, use for HW#4:}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1601301\charrsid9597656 
\par \tab BinarySearchTree & operator=(const BinarySearchTree & sourceTree);}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1601301 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\wrapdefault\faauto\rin0\lin0\itap0\pararsid10642571 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid10642571\charrsid10642571 \tab 
// YOU WRITE: gets the "smallest" Item
\par \tab void getFirst(ItemType &firstItem);
\par \tab // YOU WRITE: returns the "largest" Item
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10642571 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid10642571\charrsid10642571 \tab 
void getLast(ItemType &lastItem);}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10642571\charrsid9597656 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 \};
\par 
\par 
\par ///////////////////////// public function definitions ///////////////////////////
\par 
\par template<class ItemType>
\par bool BinarySearchTree<ItemType>::insert(const ItemType & newEntry)
\par \{
\par \tab BinaryNode<ItemType>* newNodePtr = new BinaryNode<ItemType>(newEntry);
\par \tab rootPtr = _insert(rootPtr, newNodePtr);
\par \tab return true;
\par \}
\par 
\par template<class ItemType>
\par bool BinarySearchTree<ItemType>::remove(const ItemType & target)
\par \{
\par \tab bool isSuccessful = false;
\par \tab rootPtr = _remove(rootPtr, target, isSuccessful);
\par \tab return isSuccessful;
\par \}
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid15479932\charrsid9597656 //*****************************COMPLETE THIS******************************
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 template<class ItemType>
\par bool BinarySearchTree<ItemType>::getEntry(const ItemType& anEntry, ItemType & returnedItem) const
\par \{
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid15208180\charrsid9597656 \tab // }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14906061\charrsid9597656 MUST}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight7\insrsid15208180\charrsid9597656  INCLUDE CALLING THE PRIVATE findNode FUNCTION}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14906061\charrsid9597656 \tab // Be sure to check if the findNode function actually finds anEntry
\par \tab // If it does, assign to the returnedItem parameter the item of the 
\par \tab //     found node and return true
\par \tab // If it doesn't, return false
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1601301\charrsid9597656 //NOT IN THE Tree Code Files on Catalyst, use for HW#4:
\par template<class ItemType>
\par BinarySearchTree<ItemType> & BinarySearchTree<ItemType>::operator=(const BinarySearchTree<ItemType> & sourceTree)
\par \{
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\faauto\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid11628525\charrsid9597656 \tab compare = sourceTree.compare;

\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid11628525\charrsid9597656 \tab 
this->BinaryTree::operator=(sourceTree);}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid11628525\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10696860\charrsid9597656 \tab return *this;
\par \}
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid14043284 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14043284\charrsid14043284 template<class ItemType>
\par void BinarySearchTree<ItemType>::getFirst(ItemType &firstItem)
\par \{
\par \tab // NON-recursive algorithm:
\par \tab // If the tree is empty, just return
\par \tab // FIND THE LEFT-MOST LEFT CHILD
\par \tab // WHEN you can't go left anymore, assign the node's data to firstItem
\par 
\par \}
\par 
\par template<class ItemType>
\par void BinarySearchTree<ItemType>::getLast(ItemType &lastItem)
\par \{
\par \tab // If the tree is empty, just return
\par \tab // FIND THE }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight4\insrsid2906891\charrsid2906891 RIGHT}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14043284\charrsid14043284 -MOST }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight4\insrsid2906891\charrsid2906891 RIGHT}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid2906891\charrsid14043284  }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14043284\charrsid14043284 CHILD
\par \tab // WHEN you can't go }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight4\insrsid2906891\charrsid2906891 RIGHT}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid2906891\charrsid14043284  }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight7\insrsid14043284\charrsid14043284 anymore, assign the node's data to }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight4\insrsid2906891\charrsid2906891 last}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight7\insrsid14043284\charrsid14043284 Item
\par 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14043284 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14043284\charrsid14043284 \}}{
\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
//////////////////////////// private functions ////////////}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid3153413\charrsid9597656 //////////////////////}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid15479932\charrsid9597656 // Done as class exercise:
\par template<class ItemType>\line BinaryNode<ItemType>* BinarySearchTree<ItemType>::_insert(BinaryNode<ItemType>* nodePtr,\line \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~BinaryNode<ItemType>* newNodePtr)\line \{
\par \tab if( nodePtr==0 )
\par \tab \tab return newNodePtr;
\par \tab if( }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid15479932\charrsid9597656 newNodePtr->getItem() < nodePtr->getItem()}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid15479932\charrsid9597656  )}{\rtlch\fcs1 \af39\afs20 
\ltrch\fcs0 \f39\fs20\highlight7\insrsid10386994\charrsid9597656  //*****CHANGE THIS*****}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid15479932\charrsid9597656 
\par \tab \tab nodePtr->setLeftPtr(_insert( nodePtr->getLeftPtr(), newNodePtr ));
\par \tab else
\par \tab \tab nodePtr->setRightPtr(_insert( nodePtr->getRightPtr(), newNodePtr }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid5181124\charrsid9597656 )}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid15479932\charrsid9597656 );
\par \tab return nodePtr; // must return
\par \}
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par template<class ItemType>
\par BinaryNode<ItemType>* BinarySearchTree<ItemType>::_remove(BinaryNode<ItemType>* nodePtr,
\par                                                           const ItemType target, bool & succe}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid15479932\charrsid9597656 ss)}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 

\par \{
\par \tab if (nodePtr == 0)
\par \tab \{
\par \tab \tab success = false;
\par \tab \tab return 0;
\par \tab \}
\par \tab if (}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 nodePtr->getItem() > target}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 )}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\insrsid10386994\charrsid9597656  }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid10386994\charrsid9597656 //*****CHANGE THIS*****}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par \tab \tab nodePtr->setLeftPtr(_remove(nodePtr->getLeftPtr(), target, success));
\par \tab else if (}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 nodePtr->getItem() < target}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 )}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\insrsid10386994\charrsid9597656  }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid10386994\charrsid9597656 //*****CHANGE THIS*****}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid9597656 
\par \tab \tab nodePtr->setRightPtr(_remove(nodePtr->getRightPtr(), target, success));
\par \tab else\tab // found the node
\par \tab \{
\par \tab \tab nodePtr = deleteNode(nodePtr);
\par \tab \tab success = true;
\par \tab \}
\par \tab return nodePtr;
\par \}
\par 
\par template<class ItemType>
\par BinaryNode<ItemType>* BinarySearchTree<ItemType>::deleteNode(BinaryNode<ItemType>* nodePtr)
\par \{
\par \tab if (nodePtr->isLeaf())
\par \tab \{
\par \tab \tab delete nodePtr;
\par \tab \tab nodePtr = 0;
\par \tab \tab return nodePtr;
\par \tab \}
\par \tab else if (nodePtr->getLeftPtr() == 0)
\par \tab \{
\par \tab \tab BinaryNode<ItemType>* nodeToConnectPtr = nodePtr->getRightPtr();
\par \tab \tab delete nodePtr;
\par \tab \tab nodePtr = 0;
\par \tab \tab return nodeToConnectPtr;
\par \tab \}
\par \tab else if (nodePtr->getRightPtr() == 0)
\par \tab \{
\par \tab \tab BinaryNode<ItemType>* nodeToConnectPtr = nodePtr->getLeftPtr();
\par \tab \tab delete nodePtr;
\par \tab \tab nodePtr = 0;
\par \tab \tab return nodeToConnectPtr;
\par \tab \}
\par \tab else
\par \tab \{
\par \tab \tab ItemType newNodeValue;
\par \tab \tab nodePtr->setRightPtr(removeLeftmostNode(nodePtr->getRightPtr(), newNodeValue));
\par \tab \tab nodePtr->setItem(newNodeValue);
\par \tab \tab return nodePtr;
\par \tab \}
\par \}
\par 
\par template<class ItemType>
\par BinaryNode<ItemType>* BinarySearchTree<ItemType>::removeLeftmostNode(BinaryNode<ItemType>* nodePtr,
\par                                                                      ItemType & successor)
\par \{
\par \tab if (nodePtr->getLeftPtr() == 0)
\par \tab \{
\par \tab \tab successor = nodePtr->getItem();
\par \tab \tab return deleteNode(nodePtr);
\par \tab \}
\par \tab else
\par \tab \{
\par \tab \tab nodePtr->setLeftPtr(removeLeftmostNode(nodePtr->getLeftPtr(), successor));
\par \tab \tab return nodePtr;
\par \tab \}
\par \}
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid9597656\charrsid9597656 //////////////////////////////////////////////////////////////////////////
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid9597656 // USE THIS CLASS AS THE ItemType CLASS:}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid1065166\charrsid4604986 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\faauto\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid9597656\charrsid4604986 #pragma once
\par #include <iostream>
\par #include <fstream>
\par #include <string>
\par 
\par using namespace std;
\par 
\par const int MAX_PIPS = 13;
\par const int NUM_SUITS = 4;
\par const string suitNames[NUM_SUITS] = \{ "Clubs", "Diamonds", "Hearts", "Spades" \};
\par const string pipsNames[MAX_PIPS + 1] = \{ "", "Ace", "2", "3",
\par "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King" \};
\par 
\par class Card
\par \{
\par 
\par private:
\par \tab int pips;
\par \tab int suitNum;
\par 
\par public:
\par \tab Card(void);
\par \tab Card(int pNum,
\par \tab \tab int sNum);
\par 
\par \tab int getPips() const \{ return pips; \}
\par \tab int getSuitNum()const \{ return suitNum; \}
\par \tab const string *getPipsName() const;
\par \tab const string *getSuitName() const;
\par 
\par \tab bool setPips(int pNum);
\par \tab bool setSuit(int sNum);
\par 
\par \tab bool operator < (const Card& card);
\par \tab bool operator > (const Card& card);
\par \tab bool operator == (const Card& card);
\par 
\par \tab friend ostream &operator << (ostream &strm, const Card &card);
\par \};
\par 
\par Card::Card(void)
\par \{
\par \tab pips = 1;
\par \tab suitNum = 0;
\par \}
\par 
\par 
\par Card::Card(int pNum,
\par \tab int sNum)
\par \{
\par \tab pips = 1;
\par \tab suitNum = 0;
\par \tab setPips(pNum);
\par \tab setSuit(sNum);
\par \} // end constructor #2
\par 
\par const string *Card::getPipsName() const
\par \{
\par \tab return &(pipsNames[pips]);
\par \}
\par 
\par const string *Card::getSuitName() const
\par \{
\par \tab return &(suitNames[suitNum]);
\par \}
\par 
\par bool Card::setPips(int pNum)
\par \{
\par \tab if (pNum >= 1 && pNum <= MAX_PIPS)\{
\par \tab \tab pips = pNum;
\par \tab \tab return true;
\par \tab \}
\par \tab return false;
\par \}
\par 
\par bool Card::setSuit(int sNum)
\par \{
\par \tab if (sNum >= 0 && sNum < NUM_SUITS)\{
\par \tab \tab suitNum = sNum;
\par \tab \tab return true;
\par \tab \}// end if
\par \tab return false;
\par \}
\par 
\par 
\par bool Card::operator < (const Card& card)
\par \{
\par \tab int diff = this->pips - card.pips;
\par \tab if (diff != 0)
\par \tab \tab return (diff < 0);
\par \tab // pips are the same, so compare suits
\par \tab diff = this->suitNum - card.suitNum;
\par \tab return (diff < 0);
\par \}
\par 
\par bool Card::operator >(const Card& card)
\par \{
\par \tab int diff = this->pips - card.pips;
\par \tab if (diff != 0)
\par \tab \tab return (diff > 0);
\par \tab // pips are the same, so compare suits
\par \tab diff = this->suitNum - card.suitNum;
\par \tab return (diff > 0);
\par \}
\par 
\par bool Card::operator == (const Card& card)
\par \{
\par \tab return this->pips == card.pips && this->suitNum == card.suitNum;
\par \}
\par 
\par 
\par ostream &operator << (ostream &strm, const Card &card)
\par \{
\par \tab strm << *(card.getPipsName()) << " of " << *(card.getSuitName()) << endl;
\par \tab return strm;
\par \}
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid9597656\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid15479932\charrsid9597656 //*****************************COMPLETE THIS******************************
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 template<class ItemType>
\par BinaryNode<ItemType>* BinarySearchTree<ItemType>::findNode(BinaryNode<ItemType>* nodePtr,
\par                                                            const ItemType & target) const
\par \{
\par }\pard \ltrpar\ql \li540\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin540\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4793976\charrsid9597656 \tab 
// ALGORITHM:
\par }\pard \ltrpar\ql \li547\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin547\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4793976\charrsid9597656 // \~
\~\~\~\~\~IF nodePtr doesn't exist (is 0) THEN\line //\~\~\~\~\~\~\~\~\~\~\~\~return 0\line //\~\~\~\~\~\~\~ELSE IF nodePtr's item }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid15752018\charrsid9597656 >}{\rtlch\fcs1 \af39\afs20 
\ltrch\fcs0 \f39\fs20\highlight7\insrsid4793976\charrsid9597656  target THEN (make sure you use the compare function)\line //\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~return what the recursive call to findNode, for the leftPtr, returns\line //\~\~\~\~\~\~\~
ELSE IF nodePtr's item }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid15752018\charrsid9597656 <}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4793976\charrsid9597656 
 target THEN (make sure you use the compare function)\line //\~\~\~\~\~\~\~\~\~\~\~\~return what the recursiv}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid6361045\charrsid9597656 e call to findNode, for the right}{\rtlch\fcs1 
\af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4793976\charrsid9597656 Ptr, returns}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid4793976\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid4793976\charrsid9597656 //\tab ELSE
\par \tab \tab \tab return nodePtr
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1065166\charrsid9597656 
\par \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid10499249\charrsid9597656 
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid14552297\charrsid9597656 //************************************************************************
\par // USE THE FOLLOWING STANDALONE FUNCTION}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid8258214\charrsid9597656 S}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid14552297\charrsid9597656  IN THE MAIN FILE:
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid14632248\charrsid9597656 // AND DON'T FORGET }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid14632248\charrsid9597656 ALL THE OTHER stand-alone main functions described on the 
assignment!}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid14632248\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid14552297\charrsid9597656 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\faauto\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid1783059\charrsid9597656 
void testBST(BinarySearchTree<PTR_CARD> *ptree)
\par \{
\par \tab int tempPips, tempSuitNum;
\par \tab PTR_CARD searchItem;
\par \tab PTR_CARD pfoundItem;
\par \tab string prompt("\\n\\nEnter a Card (1-13  0-4) that should be in the tree: ");
\par 
\par \tab for (int i = 0; i < 2; ++i)
\par \tab \{
\par \tab \tab cout << prompt;
\par \tab \tab cin >> tempPips >> tempSuitNum;
\par \tab \tab searchItem = new Card(tempPips, tempSuitNum);
\par \tab \tab if (ptree->getEntry(searchItem, pfoundItem))
\par \tab \tab \{
\par \tab \tab \tab cout << "Found : " << *pfoundItem << endl;
\par \tab \tab \}
\par \tab \tab else
\par \tab \tab \tab cout << *searchItem << " not found\\n";
\par 
\par \tab \tab delete searchItem;
\par \tab \tab prompt = "\\nEnter a Card (1-13  0-4) that should NOT be in the tree: ";
\par \tab \} // end for
\par 
\par \} // end testBST
\par 
\par void testCopyAndAssign(BinarySearchTree<PTR_CARD> *ptree1,
\par \tab BinarySearchTree<PTR_CARD> *ptree2)
\par \{
\par \tab BinarySearchTree<PTR_CARD> *localPtrTree;
\par 
\par \tab localPtrTree = new BinarySearchTree<PTR_CARD>(*ptree1);
\par \tab cout << "\\n\\nThe local tree from copy constructor copying Pips-ordered tree\\n";
\par \tab localPtrTree->inOrder(displayPTR_CARD);
\par \tab delete localPtrTree;
\par 
\par \tab cout << "\\nChecking if Original Pips-ordered Tree was not changed: \\n";
\par \tab ptree1->inOrder(displayPTR_CARD);
\par 
\par \tab \{ // BRACKETS ARE HERE TO CHECK WHEN IT GOES OUT OF SCOPE
\par \tab \tab BinarySearchTree<PTR_CARD> localTree(compareSuits);
\par \tab \tab localTree = *ptree2; // tests operator=
\par \tab \tab cout << "\\nThe local tree from operator= copying Suit-ordered tree\\n";
\par \tab \tab localTree.inOrder(displayPTR_CARD);
\par \tab \}
\par \tab cout << "\\nChecking if Original Suit-ordered Tree was not changed: \\n";
\par \tab ptree2->inOrder(displayPTR_CARD);
\par \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight8\insrsid16669180\charrsid9597656 
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid14308708\charrsid9597656 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16669180\charrsid9597656 // YOU WRITE THIS ONE (DESCRIBED ON THE ASSIGNMENT):
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\faauto\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16669180\charrsid9597656 void test}{\rtlch\fcs1 \af39\afs20 
\ltrch\fcs0 \f39\fs20\highlight7\insrsid9845371\charrsid9597656 Delete}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight5\insrsid8081189\charrsid8081189 (}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight5\insrsid8081189\charrsid8081189 
BinarySearchTree}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight5\insrsid8081189\charrsid8081189  }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16669180\charrsid9597656 <}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight7\insrsid1783059\charrsid9597656 PTR_CARD}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16669180\charrsid9597656 > *ptree1,
\par \tab BinarySearchTree<}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid1783059\charrsid9597656 PTR_CARD}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16669180\charrsid9597656 > *ptree2)
\par \{
\par }\pard \ltrpar\ql \li0\ri0\widctlpar\tx450\tx900\tx1350\tx1800\tx2250\tx2700\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9597656 {\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight7\insrsid16669180\charrsid9597656 \tab 
// fill in here as described on Prog. HW#4 assignment
\par \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid16669180 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid16662191 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight3\insrsid7602742\charrsid7602742 // call this function as specified near the end of HW#4 assignment:
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight3\insrsid16662191\charrsid7602742 void deletePTR_CARD(}{\rtlch\fcs1 \af39 \ltrch\fcs0 \f39\highlight3\insrsid7602742\charrsid7602742 PTR_CARD &ptrCard}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 
\f39\fs20\highlight3\insrsid16662191\charrsid7602742 )}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\highlight3\insrsid7602742\charrsid7602742 
\par \{
\par \tab if( ptrCard != 0 )
\par \tab \tab delete ptrCard;
\par \tab ptrCard = 0;\tab 
\par \}}{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid7602742 
\par 
\par }{\rtlch\fcs1 \af39\afs20 \ltrch\fcs0 \f39\fs20\insrsid7602742\charrsid9597656 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e500000000000000000000000080f9
7191c116d101feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}